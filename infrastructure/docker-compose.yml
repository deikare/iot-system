version: '3.8'
services:
  influxdb:
    hostname: influxdb
    image: iot-influx:latest
    volumes:
      # Mount for influxdb data directory and configuration
      - ./influxdbv2:/.influxdbv2
    ports:
      - "8086:8086"
    environment: 
      - INFLUXD_QUERY_CONCURRENCY=30
      - INFLUXD_QUERY_QUEUE_SIZE=50
      - INFLUXD_TLS_CERT=/etc/ssl/certs/influxdb.crt
      - INFLUXD_TLS_KEY=/etc/ssl/private/influxdb.key
      - INFLUXD_TLS_MIN_VERSION=1.2
      - INFLUXD_TLS_STRICT_CIPHERS=false
    entrypoint: influxd 
# Use the influx cli to set up an influxdb instance. 
  influxdb_cli:
    links:
      - influxdb
    image: iot-influx.cli:latest
# Use these same configurations parameters in your telegraf configuration, mytelegraf.conf.
    entrypoint: influx setup --bucket mybucket -t mytoken -o myorg --username=admin --password=admin123 --host=https://influxdb:8086 -f
      # Wait for the influxd service in the influxdb container has fully bootstrapped before trying to setup an influxdb instance with the influxdb_cli service. 
    restart: on-failure:10
    depends_on:
      - influxdb
  telegraf:
    image: telegraf
    links:
      - influxdb
    volumes:
      # Mount for telegraf config
      - ./telegraf/mytelegraf.conf:/etc/telegraf/telegraf.conf
    depends_on:
      - influxdb_cli

  zoo1:
    image: zookeeper:latest
    hostname: zoo1
    environment:
      ZOO_MY_ID: 1
      ZOO_PORT: 2181
      ZOO_SERVERS: server.1=0.0.0.0:2888:3888;2181 server.2=zoo2:2888:3888;2181 server.3=zoo3:2888:3888;2181
    volumes:
      - ./zk-multiple-kafka-multiple/zoo1/data:/data
      - ./zk-multiple-kafka-multiple/zoo1/datalog:/datalog

  zoo2:
    image: zookeeper:latest
    hostname: zoo2
    environment:
      ZOO_MY_ID: 2
      ZOO_PORT: 2182
      ZOO_SERVERS: server.1=zoo1:2888:3888;2181 server.2=0.0.0.0:2888:3888;2181 server.3=zoo3:2888:3888;2181
    volumes:
      - ./zk-multiple-kafka-multiple/zoo2/data:/data
      - ./zk-multiple-kafka-multiple/zoo2/datalog:/datalog

  zoo3:
    image: zookeeper:latest
    hostname: zoo3
    environment:
      ZOO_MY_ID: 3
      ZOO_PORT: 2183
      ZOO_SERVERS: server.1=zoo1:2888:3888;2181 server.2=zoo2:2888:3888;2181 server.3=0.0.0.0:2888:3888;2181
    volumes:
      - ./zk-multiple-kafka-multiple/zoo3/data:/data
      - ./zk-multiple-kafka-multiple/zoo3/datalog:/datalog

  kafka1:
    image: confluentinc/cp-kafka:latest
    hostname: kafka1
    depends_on:
      - zoo1
      - zoo2
      - zoo3
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181,zoo2:2182,zoo3:2183"
      KAFKA_ADVERTISED_LISTENERS: SSL://kafka1:19092
      #KAFKA_LISTENERS: SSL://kafka1:19092
      KAFKA_SSL_KEYSTORE_FILENAME: kafka.broker1.keystore.jks
      KAFKA_SSL_KEYSTORE_CREDENTIALS: 1_keystore_creds
      KAFKA_SSL_KEY_CREDENTIALS: 1_sslkey_creds
      KAFKA_SSL_TRUSTSTORE_FILENAME: kafka.broker1.truststore.jks
      KAFKA_SSL_TRUSTSTORE_CREDENTIALS: 1_truststore_creds
      #KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: " "
      KAFKA_SSL_CLIENT_AUTH: required
      KAFKA_SECURITY_INTER_BROKER_PROTOCOL: SSL
      #KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:SSL
      #KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
    volumes:
        - ./certs/kafka:/etc/kafka/secrets
 
  kafka2:
    image: confluentinc/cp-kafka:latest
    hostname: kafka2
    depends_on:
      - zoo1
      - zoo2
      - zoo3
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181,zoo2:2182,zoo3:2183"
      KAFKA_ADVERTISED_LISTENERS: SSL://kafka2:19093
      #KAFKA_LISTENERS: SSL://kafka2:19093
      KAFKA_SSL_KEYSTORE_FILENAME: kafka.broker2.keystore.jks
      KAFKA_SSL_KEYSTORE_CREDENTIALS: 2_keystore_creds
      KAFKA_SSL_KEY_CREDENTIALS: 2_sslkey_creds
      KAFKA_SSL_TRUSTSTORE_FILENAME: kafka.broker2.truststore.jks
      KAFKA_SSL_TRUSTSTORE_CREDENTIALS: 2_truststore_creds
      #KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: " "
      KAFKA_SSL_CLIENT_AUTH: required
      KAFKA_SECURITY_INTER_BROKER_PROTOCOL: SSL
      #KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:SSL
      #KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
    volumes:
      - ./certs/kafka:/etc/kafka/secrets

  kafka3:
    image: confluentinc/cp-kafka:latest
    hostname: kafka3
    depends_on:
      - zoo1
      - zoo2
      - zoo3
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181,zoo2:2182,zoo3:2183"
      KAFKA_ADVERTISED_LISTENERS: SSL://kafka3:19094
      #KAFKA_LISTENERS: SSL://kafka3:19094
      KAFKA_SSL_KEYSTORE_FILENAME: kafka.broker3.keystore.jks
      KAFKA_SSL_KEYSTORE_CREDENTIALS: 3_keystore_creds
      KAFKA_SSL_KEY_CREDENTIALS: 3_sslkey_creds
      KAFKA_SSL_TRUSTSTORE_FILENAME: kafka.broker3.truststore.jks
      KAFKA_SSL_TRUSTSTORE_CREDENTIALS: 3_truststore_creds
      #KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: " "
      KAFKA_SSL_CLIENT_AUTH: required
      KAFKA_SECURITY_INTER_BROKER_PROTOCOL: SSL
      #KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:SSL
      #KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
    volumes:
      - ./certs/kafka:/etc/kafka/secrets